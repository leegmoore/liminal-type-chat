openapi: 3.0.3
info:
  title: Liminal Type Chat Edge API
  description: |
    Edge API for Liminal Type Chat application.
    This API is optimized for frontend UI consumption and provides an interface
    for managing conversations and messages.
  version: 1.0.0
  contact:
    name: Liminal Type Chat Team
servers:
  - url: http://localhost:8765
    description: Local development server
paths:
  /api/v1/conversations:
    get:
      summary: Get all conversations
      description: Retrieve a list of conversation summaries
      operationId: getConversations
      tags:
        - Conversations
      parameters:
        - name: limit
          in: query
          description: Maximum number of conversations to return
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of conversations to skip
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new conversation
      description: Create a new conversation with an optional title and initial message
      operationId: createConversation
      tags:
        - Conversations
      requestBody:
        description: Conversation to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/conversations/{conversationId}:
    get:
      summary: Get a conversation by ID
      description: Retrieve a single conversation by its ID
      operationId: getConversationById
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          description: ID of the conversation to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a conversation
      description: Update an existing conversation's properties (e.g., title)
      operationId: updateConversation
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          description: ID of the conversation to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConversationRequest'
      responses:
        '200':
          description: Conversation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a conversation
      description: Delete a conversation by its ID
      operationId: deleteConversation
      tags:
        - Conversations
      parameters:
        - name: conversationId
          in: path
          description: ID of the conversation to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Conversation deleted
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/conversations/{conversationId}/messages:
    post:
      summary: Add a message to a conversation
      description: Add a new message to an existing conversation
      operationId: addMessage
      tags:
        - Messages
      parameters:
        - name: conversationId
          in: path
          description: ID of the conversation to add the message to
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Message to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMessageRequest'
      responses:
        '201':
          description: Message added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/chat/models/{provider}:
    get:
      summary: List available LLM models for a provider
      description: Retrieve a list of available LLM models for the specified provider
      operationId: getModels
      tags:
        - Chat
      parameters:
        - name: provider
          in: path
          description: LLM provider identifier (e.g., openai, anthropic)
          required: true
          schema:
            type: string
            enum: [openai, anthropic]
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/LlmModelInfo'
        '400':
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/chat/completions:
    post:
      summary: Complete a chat prompt
      description: Send a prompt to an LLM and get a completion response
      operationId: getChatCompletion
      tags:
        - Chat
      requestBody:
        description: Chat completion request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Chat completion response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/chat/completions/stream:
    post:
      summary: Stream a chat completion
      description: Send a prompt to an LLM and get a streamed completion response
      operationId: streamChatCompletion
      tags:
        - Chat
      requestBody:
        description: Chat completion request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Streamed chat completion response
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-sent events stream of completion chunks
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Get server health status
      description: Check if the server is running
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  version:
                    type: string
                    example: 1.0.0
                  timestamp:
                    type: string
                    format: date-time
components:
  schemas:
    ConversationResponse:
      type: object
      required:
        - conversationId
        - createdAt
        - updatedAt
        - messages
      properties:
        conversationId:
          type: string
          format: uuid
          description: Unique identifier for the conversation
        title:
          type: string
          nullable: true
          description: Title of the conversation
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of conversation creation
        updatedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of last conversation update
        messages:
          type: array
          description: Array of messages in the conversation
          items:
            $ref: '#/components/schemas/MessageResponse'
        metadata:
          type: object
          description: Optional key-value pairs of metadata
          additionalProperties: true
    MessageResponse:
      type: object
      required:
        - messageId
        - role
        - content
        - createdAt
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique identifier for the message
        role:
          type: string
          enum:
            - user
            - assistant
            - system
            - tool
          description: Role of the message sender
        content:
          type: string
          description: Text content of the message
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of message creation
        status:
          type: string
          enum:
            - pending
            - streaming
            - complete
            - error
            - interrupted
          description: Status of the message processing
        metadata:
          type: object
          description: Optional key-value pairs of metadata
          additionalProperties: true
    CreateConversationRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
          description: Optional title for the conversation
        initialMessage:
          type: object
          description: Optional initial message to start the conversation
          required:
            - role
            - content
          properties:
            role:
              type: string
              enum:
                - user
                - assistant
                - system
                - tool
              description: Role of the message sender
            content:
              type: string
              description: Text content of the message
            metadata:
              type: object
              description: Optional key-value pairs of metadata
              additionalProperties: true
        metadata:
          type: object
          description: Optional key-value pairs of metadata
          additionalProperties: true
    UpdateConversationRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
          description: New title for the conversation. Send null to clear the title.
        metadata:
          type: object
          description: Optional key-value pairs of metadata to update
          additionalProperties: true
    AddMessageRequest:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
            - system
            - tool
          description: Role of the message sender
        content:
          type: string
          description: Text content of the message
        status:
          type: string
          enum:
            - pending
            - streaming
            - complete
            - error
            - interrupted
          description: Optional initial status of the message
        metadata:
          type: object
          description: Optional key-value pairs of metadata
          additionalProperties: true
    ConversationListResponse:
      type: object
      required:
        - conversations
      properties:
        conversations:
          type: array
          description: Array of conversation summaries
          items:
            $ref: '#/components/schemas/ConversationSummary'
    ConversationSummary:
      type: object
      required:
        - conversationId
        - createdAt
        - updatedAt
      properties:
        conversationId:
          type: string
          format: uuid
          description: Unique identifier for the conversation
        title:
          type: string
          nullable: true
          description: Title of the conversation
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of conversation creation
        updatedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of last conversation update
        metadata:
          type: object
          description: Optional key-value pairs of metadata
          additionalProperties: true
    LlmModelInfo:
      type: object
      required:
        - id
        - provider
        - name
        - maxTokens
        - supportsStreaming
      properties:
        id:
          type: string
          description: Unique identifier for the model
          example: gpt-4
        provider:
          type: string
          description: LLM provider identifier
          enum: [openai, anthropic]
          example: openai
        name:
          type: string
          description: Human-readable name of the model
          example: GPT-4
        maxTokens:
          type: integer
          description: Maximum number of tokens the model can generate
          example: 8192
        supportsStreaming:
          type: boolean
          description: Whether the model supports streaming responses
          example: true
        contextWindow:
          type: integer
          description: Size of the context window in tokens
          example: 8192
        trainedUntil:
          type: string
          description: Date the model was trained until
          example: "2023-04-01"
        pricingPerInputToken:
          type: number
          format: float
          description: Price per input token in USD
          example: 0.00003
        pricingPerOutputToken:
          type: number
          format: float
          description: Price per output token in USD
          example: 0.00006

    ChatCompletionRequest:
      type: object
      required:
        - prompt
        - provider
        - threadId
      properties:
        prompt:
          type: string
          description: The prompt text to send to the LLM
          example: "What is the capital of France?"
        provider:
          type: string
          description: The LLM provider to use
          enum: [openai, anthropic]
          example: openai
        modelId:
          type: string
          description: Optional model ID, if not provided a default for the provider will be used
          example: gpt-4
        threadId:
          type: string
          format: uuid
          description: ID of the thread to add the message to
        options:
          type: object
          description: Additional options for the LLM request
          properties:
            temperature:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: Controls randomness (0.0 to 1.0)
              example: 0.7
            maxTokens:
              type: integer
              description: Maximum tokens in the response
              example: 1000
            topP:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: Controls diversity via nucleus sampling
              example: 0.9
            frequencyPenalty:
              type: number
              format: float
              description: Penalizes frequent tokens
              example: 0.5
            presencePenalty:
              type: number
              format: float
              description: Penalizes repeated tokens
              example: 0.5
            stop:
              type: array
              description: Sequences where the API will stop generating
              items:
                type: string
              example: ["\n\n", "User:"]

    ChatCompletionResponse:
      type: object
      required:
        - threadId
        - messageId
        - content
        - model
        - provider
      properties:
        threadId:
          type: string
          format: uuid
          description: The thread ID
        messageId:
          type: string
          format: uuid
          description: ID of the assistant's message
        content:
          type: string
          description: Content of the assistant's response
        model:
          type: string
          description: The model used for completion
          example: gpt-4
        provider:
          type: string
          description: The provider that generated the completion
          example: openai
        finishReason:
          type: string
          enum: [stop, length, content_filter, error]
          description: Reason the completion finished
        usage:
          type: object
          description: Token usage statistics
          properties:
            promptTokens:
              type: integer
              description: Tokens in the prompt
              example: 15
            completionTokens:
              type: integer
              description: Tokens in the completion
              example: 25
            totalTokens:
              type: integer
              description: Total tokens used
              example: 40
            
    ErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
          description: Error code identifying the type of error
          example: VALIDATION_ERROR
        message:
          type: string
          description: User-friendly error message
          example: Invalid request data
        details:
          type: string
          nullable: true
          description: Additional details about the error
        validationErrors:
          type: array
          description: Validation errors when errorCode is VALIDATION_ERROR
          items:
            type: object
            required:
              - field
              - message
            properties:
              field:
                type: string
                description: JSON path to the invalid field
                example: body.title
              message:
                type: string
                description: Description of the validation failure
                example: must be a string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authentication will be implemented in Milestone 0008"
