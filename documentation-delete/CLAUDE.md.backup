# CRITICAL INSTRUCTIONS FOR CLAUDE

This document contains the most important instructions that Claude MUST follow for this project. These instructions override any default behaviors.

## ‚ö†Ô∏è GIT WORKFLOW - FOLLOW EXACTLY

### When committing changes:

```bash
# ALWAYS run these exact commands in this order:
git add .              # Stage ALL changes without exception
git status             # Verify what will be committed
git commit -m "type: message"    # Use descriptive message with type prefix
git push               # Push changes to remote
```

**CRITICAL**: NEVER selectively choose files to commit unless EXPLICITLY instructed to do so.

**ALWAYS USE `git add .`** - Do not overthink this or try to be selective.

### Commit Message Format:
- Start with type: `feat:`, `fix:`, `docs:`, `test:`, `refactor:`, `chore:`
- Use present tense: "Add feature" not "Added feature"
- Be specific about what changed

## üîç DEFINITION OF DONE

Work is **NOT COMPLETE** until ALL of these are met:

1. ‚úì ALL tests pass (server AND client)
2. ‚úì ALL linting checks pass (server AND client)
3. ‚úì Code builds successfully (server AND client)
4. ‚úì Applications start without errors (server AND client)
5. ‚úì Manual testing is performed and passes (when specified)

If fixing one issue breaks another, BOTH must be fixed before considering work complete.

## üß™ TESTING REQUIREMENTS

### Automated Tests
- Run server tests: `cd server && npm test`
- Run client tests: `cd client && npm test`
- Fix ALL failing tests before committing
- **CRITICAL**: ALL code coverage thresholds MUST be met (current thresholds: 90% statements, 80% branches, 90% functions)
- If coverage is below thresholds, add tests to reach required coverage

### Linting
- Run server linting: `cd server && npm run lint`
- Run client linting: `cd client && npm run lint`
- Fix ALL linting issues before committing

### Manual Testing
- **CRITICAL**: When performing manual testing, guide the user step-by-step through each test
- Wait for user confirmation at each step before proceeding
- Document test results thoroughly
- **NEVER** consider manual testing complete until user has verified and approved

## üöÄ PROJECT CONFIGURATION

- Server runs on port **8765**
- Client runs on port **5173**

## üíª IMPLEMENTATION PRIORITIES

1. **Thoroughness over speed**: Implement ALL aspects of a feature, not just the happy path
2. **Test coverage**: Ensure all code has appropriate tests
3. **Security**: Follow security best practices, especially for authentication
4. **Documentation**: Document complex logic and APIs

## üìù COMMON ERRORS TO AVOID

- **NEVER** assume I've already added files with selective git adds
- **NEVER** consider work complete until ALL definition of done criteria are met
- **NEVER** skip manual testing steps or rush through them
- **NEVER** implement only partial solutions to complex problems
- **ALWAYS** document test procedures thoroughly for repeatability

## üîÑ ADDITIONAL LESSONS FROM PAST MISTAKES

- When asked to document manual testing, create a clear step-by-step guide that the user can follow
- When resuming an incomplete task, read any in-progress documentation first (like AUTH_TEST_IN_PROCESS.md)
- Do not create documentation of manual testing as a substitute for actually performing the testing with the user
- When the user points out a mistake, fix it immediately and avoid defending the mistake
- Focus on fewer simultaneous tasks to ensure thoroughness rather than partial progress on many fronts

## üìö REFERENCE GUIDES

When you need specific information about project components, refer to these documents:

### Core Architecture & Standards
| Topic | Document | Description |
|-------|----------|-------------|
| Project Overview | [README.md](/README.md) | Project structure, features, and setup |
| Code Standards | [Development Standards](/wiki/engineering/standards/development-standards.md) | Coding standards and architectural patterns |
| Testing Standards | [Automated Testing Guide](/wiki/engineering/standards/automated-testing.md) | Testing strategy and coverage requirements |
| Error Handling | [Error Codes Reference](/wiki/engineering/reference/error-codes.md) | Error system with standardized codes |

### Security Implementation
| Topic | Document | Description |
|-------|----------|-------------|
| Security Architecture | [Security Architecture](/wiki/security/architecture.md) | Overall security design principles |
| Security Implementation | [Security Implementation](/wiki/security/implementation.md) | Practical security implementation guide |
| OAuth & PKCE | [OAuth PKCE Flow](/wiki/security/auth/oauth-pkce.md) | Authentication flow with code examples |
| Environment Security | [Environment Security](/wiki/security/environment-security.md) | Environment-specific security controls |

### API Structure
| Topic | Document | Description |
|-------|----------|-------------|
| Edge API | [edge-api.yaml](/server/openapi/edge-api.yaml) | Client-facing API specification |
| Domain API | [domain-api.yaml](/server/openapi/domain-api.yaml) | Internal service API specification |
| Database Schema | [Database Schema](/wiki/engineering/database/schema.md) | Data models and relationships |

### Project Components
| Topic | Document | Description |
|-------|----------|-------------|
| Server Structure | [server/README.md](/server/README.md) | Server organization and features |
| Client Structure | [client/README.md](/client/README.md) | Client organization and features |
| Components | [Frontend Components](/wiki/engineering/frontend/components.md) | UI component guidelines |
| Backend Services | [Backend Services](/wiki/engineering/backend/services.md) | Service layer implementation |

### Current Development
| Topic | Document | Description |
|-------|----------|-------------|
| Project Roadmap | [Roadmap](/wiki/project/roadmap.md) | Future development plans |
| Current Milestones | [Current Milestones](/wiki/project/milestones/current/) | Milestones in progress |
| Latest Work | [Development Journals](/in-progress-docs/journals/) | Development progress logs |
| Auth Testing | [Authentication Testing](/in-progress-docs/evaluations/auth-testing.md) | Authentication testing records |

### Documentation Structure
| Topic | Document | Description |
|-------|----------|-------------|
| Wiki Structure | [Wiki README](/wiki/README.md) | Stable, curated documentation |
| Working Docs | [In-Progress Docs README](/in-progress-docs/README.md) | Active and historical documentation |
| Documentation Standards | [Documentation Classification](/docs/DOCUMENTATION_CLASSIFICATION.md) | Rules for organizing documentation |
| Migration Plan | [Documentation Migration](/docs/DOCUMENTATION_MIGRATION_PLAN.md) | Plan for migrating docs to new structure |

## üõ†Ô∏è KEY IMPLEMENTATION RULES

### Tiered Architecture
- **Always respect the three-tier architecture**:
  - Domain tier (core business logic)
  - Edge tier (client-facing API)
  - UI tier (React frontend)
- Use the domain client adapter pattern for cross-tier communication

### Security Implementation
- **Always encrypt API keys** using the EncryptionService
- **Never log sensitive data** like tokens or keys
- Follow JWT-based authentication with proper validation
- Respect the authentication boundaries between Edge and Domain tiers

### Environment-Specific Behavior
- Check environment configuration before development work
- Security features behave differently by environment
- The EnvironmentService determines appropriate security levels
- Default to highest security when environment is uncertain